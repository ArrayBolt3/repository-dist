#!/bin/bash

## Copyright (C) 2012 - 2020 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x
set -o pipefail
set -o errtrace

SCRIPTNAME="$(basename "$BASH_SOURCE")"

error_handler() {
   local exit_code="$?"

   local MSG="\
###############################################################################
## $SCRIPTNAME script bug.
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
##
## Experts only:
## $SCRIPTNAME --verbose
## for verbose output. Clean the output and
## submit to derivative developers.
###############################################################################\
"
   echo "$MSG"
   exit 1
}

trap "error_handler" ERR

colors() {
   if [ "$TERM" = "" ]; then
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/037
   ## Variables for terminal requests.
   [[ -t 2 ]] && {
       alt=$(      tput smcup  || tput ti      ) # Start alt display
       ealt=$(     tput rmcup  || tput te      ) # End   alt display
       hide=$(     tput civis  || tput vi      ) # Hide cursor
       show=$(     tput cnorm  || tput ve      ) # Show cursor
       save=$(     tput sc                     ) # Save cursor
       load=$(     tput rc                     ) # Load cursor
       bold=$(     tput bold   || tput md      ) # Start bold
       stout=$(    tput smso   || tput so      ) # Start stand-out
       estout=$(   tput rmso   || tput se      ) # End stand-out
       under=$(    tput smul   || tput us      ) # Start underline
       eunder=$(   tput rmul   || tput ue      ) # End   underline
       reset=$(    tput sgr0   || tput me      ) # Reset cursor
       blink=$(    tput blink  || tput mb      ) # Start blinking
       italic=$(   tput sitm   || tput ZH      ) # Start italic
       eitalic=$(  tput ritm   || tput ZR      ) # End   italic
   [[ $TERM != *-m ]] && {
       red=$(      tput setaf 1|| tput AF 1    )
       green=$(    tput setaf 2|| tput AF 2    )
       yellow=$(   tput setaf 3|| tput AF 3    )
       blue=$(     tput setaf 4|| tput AF 4    )
       magenta=$(  tput setaf 5|| tput AF 5    )
       cyan=$(     tput setaf 6|| tput AF 6    )
   }
       white=$(    tput setaf 7|| tput AF 7    )
       default=$(  tput op                     )
       eed=$(      tput ed     || tput cd      )   # Erase to end of display
       eel=$(      tput el     || tput ce      )   # Erase to end of line
       ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
       ewl=$eel$ebl                                # Erase whole line
       draw=$(     tput -S <<< '   enacs
                                   smacs
                                   acsc
                                   rmacs' || { \
                   tput eA; tput as;
                   tput ac; tput ae;         } )   # Drawing characters
       back=$'\b'
   } 2>/dev/null ||:
}

preparation() {
   ## Fallback.
   ## TODO
#    [ -n "$DERIVATIVE_APT_REPOSITORY_BASEURI" ] || DERIVATIVE_APT_REPOSITORY_BASEURI="\
# tor+http://deb.dds6qkxpwdeubwucdiaord2xgbbeyds25rbsgr73tbfpqpt4a6vjwsyd.onion
# tor+https://deb.whonix.org"

   [ -n "$apt_source_key" ] || apt_source_key="/usr/share/repository-dist/derivative-distribution-signing-key.asc"
   [ -n "$apt_target_key" ] || apt_target_key="/etc/apt/trusted.gpg.d/derivative.gpg"
   [ -n "$sources_list_target_build_remote_derivative" ] || sources_list_target_build_remote_derivative="/etc/apt/sources.list.d/derivative.list"
}

root_check() {
   if [ "$(id -u)" != "0" ]; then
      echo "ERROR: This must be run as root (sudo)!"
      exit 1
   else
      true "INFO: Script running as root."
   fi
}

sanity_tests() {
   command -v id >/dev/null
}

parse_cmd_options() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   local HELP_MSG="See:
man $SCRIPTNAME"

   while :
   do
       case $1 in
           -h | --help | -\?)
               echo "$HELP_MSG"
               exit 0
               ;;
           -v | --verbose)
               echo "INFO '$BASH_SOURCE': verbose output..."
               set -x
               VERBOSE="1"
               shift
               ;;
           -e | --enable)
               enable="1"
               shift
               ;;
           -d | --disable)
               disable="1"
               shift
               ;;
           --refresh-keys)
               refresh_keys="1"
               shift
               ;;
           -c | --codename)
               codename="$2"
               if [ "$codename" = "" ]; then
                  echo "ERROR: codename may not be empty!"
                  exit 1
               fi
               shift 2
               ;;
           -r | --repository)
               repository="$2"
               if [ "$repository" = "" ]; then
                  echo "ERROR: repository may not be empty! You most likely want to use ${under}stable${reset}, ${under}stable-proposed-update${reset}, ${under}testers${reset} or ${under}developers${reset} as repository."
                  exit 1
               fi
               shift 2
               ;;
            ## TODO
#            -b | --baseuri)
#                DERIVATIVE_APT_REPOSITORY_BASEURI="$2"
#                if [ "$DERIVATIVE_APT_REPOSITORY_BASEURI" = "" ]; then
#                   echo "ERROR: DERIVATIVE_APT_REPOSITORY_BASEURI may not be empty!"
#                   exit 1
#                fi
#                shift 2
#                ;;
           --)
               shift
               break
               ;;
           -*)
               echo "INFO '$BASH_SOURCE': unknown option: '$1'" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
}

add_keys() {
   if diff "$apt_source_key" "$apt_target_key" &>/dev/null ; then
      echo "INFO '$BASH_SOURCE': signing key '$apt_source_key' already installed in '$apt_target_key', ok.'${reset}'"
   fi
   test -f "$apt_source_key"
   echo "INFO '$BASH_SOURCE': Running '${under}cp --verbose $apt_source_key $apt_target_key'${reset}'..."
   cp --verbose "$apt_source_key" "$apt_target_key"
   test -f "$apt_target_key"
   diff "$apt_source_key" "$apt_target_key"
   echo "INFO '$BASH_SOURCE': Done."
}

remove_keys() {
   echo "INFO '$BASH_SOURCE': Deleting '${under}$apt_target_key${reset}'..."

   if [ -f "$apt_target_key" ]; then
      rm --verbose "$apt_target_key"
      ! test -e "$apt_target_key"
      echo "INFO '$BASH_SOURCE': Done."
   else
      echo "INFO '$BASH_SOURCE': '${under}$apt_target_key${reset}' does not exist, ok."
   fi
}

refresh_keys() {
   if [ -e "$apt_target_key" ]; then
      add_keys
   else
      echo "INFO '$BASH_SOURCE': '${under}$apt_target_key${reset}' does not exist. Doing nothing, ok."
   fi
}

parse_variables() {
   if [ "$disable" = "1" ]; then
      return 0
   fi
   if [ "$refresh_keys" = "1" ]; then
      return 0
   fi

   if [ "$codename" = "" ]; then
      [ -n "$codename_default_stable" ] || codename_default_stable="$(lsb_release --short --codename)"

      ## If codename_default_stable could not be set using lsb_release above, try to acquire it
      ## from /etc/debian_version.
      if [ "$codename_default_stable" = "n/a" ]; then
         if cat /etc/debian_version | grep -q "/sid" ; then
            codename_default_stable="$(cat /etc/debian_version)"
            ## example codename_default_stable:
            ## buster/sid
            codename_default_stable="${codename_default_stable/%"/sid"}"
            ## example codename_default_stable:
            ## buster
         fi
      fi

      ## Remove eventual white spaces. Just in case.
      codename_default_stable="${codename_default_stable//[[:space:]]}"

      if [ "$codename_default_stable" = "" ]; then
         echo "ERROR: codename auto detection failed! Please manually set ${under}--codename${reset}."
         exit 1
      fi

      if [ "$repository" = "stable" ]; then
         codename="$codename_default_stable"
      elif [ "$repository" = "stable-proposed-updates" ]; then
         codename="${codename_default_stable}-proposed-updates"
      elif [ "$repository" = "testers" ]; then
         codename="${codename_default_stable}-testers"
      elif [ "$repository" = "developers" ]; then
         codename="${codename_default_stable}-developers"
      else
         echo "ERROR: No option given. Usage examples:

sudo $SCRIPTNAME --enable --repository stable

sudo $SCRIPTNAME --verbose --enable --repository stable

sudo $SCRIPTNAME --enable --codename $codename_default_stable

sudo $SCRIPTNAME --disable

sudo $SCRIPTNAME --disable --verbose

See also:

man $SCRIPTNAME"
         exit 1
      fi
   fi

   codename_old="$codename"
   codename="${codename//[[:space:]]}"

   if [ ! "$codename_old" = "$codename" ]; then
      echo "INFO: Removed white spaces from codename ${under}$codename_old${reset} and set to codename ${under}$codename${reset}."
   fi
}

enable_disable_refresh_keys() {
   if [ "$disable" = "1" ]; then
      remove_keys
   elif [ "$enable" = "1" ]; then
      add_keys
   elif [ "$refresh_keys" = "1" ]; then
      refresh_keys
   else
      echo "ERROR: You must use either ${under}--enable${reset}, ${under}--refresh-keys${reset} or ${under}--disable${reset}."
      exit 1
   fi
}

disable_refresh_create() {
   if [ "$disable" = "1" ]; then
      if [ -f "$sources_list_target_build_remote_derivative" ]; then
         echo "INFO '$BASH_SOURCE': Deleting derivative APT repository '${under}$sources_list_target_build_remote_derivative${reset}'..."
         rm --force "$sources_list_target_build_remote_derivative"
         echo "INFO '$BASH_SOURCE': Done."
      else
         echo "INFO '$BASH_SOURCE': '${under}$sources_list_target_build_remote_derivative${reset}' does not exist, ok."
      fi
      mkdir -p /var/cache/setup-dist/status-files || true
      touch /var/cache/setup-dist/status-files/repository-dist.done || true
   elif [ "$refresh_keys" = "1" ]; then
      true
   else
      sources_list_generator
      mkdir -p /var/cache/setup-dist/status-files || true
      touch /var/cache/setup-dist/status-files/repository-dist.done || true
   fi
}

sources_list_generator() {
   if echo "$codename" | grep -q -i "n/a" ; then
      echo "ERROR: Autodetected codename '${under}$codename${reset}' is invalid!"
      echo 'Please set codename explicitly using:'
      echo '${under}--codename${reset}'
      exit 1
   fi

   echo "INFO '$BASH_SOURCE': Using distribution '${under}$codename${reset}' (version of derivative) as apt repository."
   echo "INFO '$BASH_SOURCE': Creating '${under}$sources_list_target_build_remote_derivative${reset}'..."

   echo "\
# Copyright (C) 2012 - 2020 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
# See the file COPYING for copying conditions.

# $sources_list_target_build_remote_derivative

# This file has been automatically created by $SCRIPTNAME.
# If you make manual changes to it, your changes get lost next time you run
# the $SCRIPTNAME tool.
# You can conveniently manage this file, using the $SCRIPTNAME tool.
# For any modifications (delete this file, use stable version, use testers
# version or use developers version), please use the $SCRIPTNAME tool.
# Run:
#    sudo $SCRIPTNAME
" > "$sources_list_target_build_remote_derivative"

   #for baseuri in $DERIVATIVE_APT_REPOSITORY_BASEURI; do
      echo "\
#deb tor+http://deb.dds6qkxpwdeubwucdiaord2xgbbeyds25rbsgr73tbfpqpt4a6vjwsyd.onion $codename main contrib non-free
#deb-src tor+http://deb.dds6qkxpwdeubwucdiaord2xgbbeyds25rbsgr73tbfpqpt4a6vjwsyd.onion $codename main contrib non-free

deb tor+https://deb.whonix.org $codename main contrib non-free
#deb-src tor+https://deb.whonix.org $codename main contrib non-free
" >> "$sources_list_target_build_remote_derivative"
   #done

   echo "\
# Leaving source line disabled by default to safe some time, it's not useful
# anyway, since it's better to get the source code from the git repository.

# End of $sources_list_target_build_remote_derivative
" >> "$sources_list_target_build_remote_derivative"

   cat "$sources_list_target_build_remote_derivative"
   echo "INFO '$BASH_SOURCE': Done."
}

main_function() {
   root_check
   sanity_tests
   colors
   preparation
   parse_cmd_options "$@"
   parse_variables
   enable_disable_refresh_keys
   disable_refresh_create
   sync
}

main_function "$@"
