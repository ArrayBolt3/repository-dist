#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x
set -o pipefail

SCRIPTNAME="$(basename $0)"

error_handler() {
   local exit_code="$?"

   local MSG="\
###############################################################################
## $SCRIPTNAME script bug.
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
##
## Experts only:
## $SCRIPTNAME --verbose
## for verbose output. Clean the output and
## submit to Whonix developers.
###############################################################################\
"
   echo "$MSG"
   exit 1
}

trap "error_handler" ERR

## In postinst.d scripts when upgrading using apt-get ~ does resolve to
## /home/user instead of /root for some reason.
root_whonix_d_folder=/root/.whonix.d
mkdir --parents "$root_whonix_d_folder"
## Allowing others to read it, so whonixsetup-autostart and whonixcheck can read it.
chmod --recursive g+r "$root_whonix_d_folder"
chmod --recursive o+r "$root_whonix_d_folder"
autogenerated_config_file="$root_whonix_d_folder/35_aptrepository_autogenerated"

## Thanks to:
## http://mywiki.wooledge.org/BashFAQ/037
## Variables for terminal requests.
[[ -t 2 ]] && {
    alt=$(      tput smcup  || tput ti      ) # Start alt display
    ealt=$(     tput rmcup  || tput te      ) # End   alt display
    hide=$(     tput civis  || tput vi      ) # Hide cursor
    show=$(     tput cnorm  || tput ve      ) # Show cursor
    save=$(     tput sc                     ) # Save cursor
    load=$(     tput rc                     ) # Load cursor
    bold=$(     tput bold   || tput md      ) # Start bold
    stout=$(    tput smso   || tput so      ) # Start stand-out
    estout=$(   tput rmso   || tput se      ) # End stand-out
    under=$(    tput smul   || tput us      ) # Start underline
    eunder=$(   tput rmul   || tput ue      ) # End   underline
    reset=$(    tput sgr0   || tput me      ) # Reset cursor
    blink=$(    tput blink  || tput mb      ) # Start blinking
    italic=$(   tput sitm   || tput ZH      ) # Start italic
    eitalic=$(  tput ritm   || tput ZR      ) # End   italic
[[ $TERM != *-m ]] && {
    red=$(      tput setaf 1|| tput AF 1    )
    green=$(    tput setaf 2|| tput AF 2    )
    yellow=$(   tput setaf 3|| tput AF 3    )
    blue=$(     tput setaf 4|| tput AF 4    )
    magenta=$(  tput setaf 5|| tput AF 5    )
    cyan=$(     tput setaf 6|| tput AF 6    )
}
    white=$(    tput setaf 7|| tput AF 7    )
    default=$(  tput op                     )
    eed=$(      tput ed     || tput cd      )   # Erase to end of display
    eel=$(      tput el     || tput ce      )   # Erase to end of line
    ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
    ewl=$eel$ebl                                # Erase whole line
    draw=$(     tput -S <<< '   enacs
                                smacs
                                acsc
                                rmacs' || { \
                tput eA; tput as;
                tput ac; tput ae;         } )   # Drawing characters
    back=$'\b'
} 2>/dev/null ||:

root_check() {
   if [ "$(id -u)" != "0" ]; then
      echo "ERROR: This must be run as root (sudo)!"
      exit 1
   else
      true "INFO: Script running as root."
   fi
}

sanity_tests() {
   trap "error_handler" ERR

   command -v clear >/dev/null
   command -v apt-key >/dev/null
   command -v id >/dev/null
   command -v mkdir >/dev/null
   command -v mktemp >/dev/null
   command -v dialog >/dev/null
   command -v awk >/dev/null
}

read_config() {
   trap "error_handler" ERR

   for i in /etc/whonix.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done

   for i in $root_whonix_d_folder/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         source "$i"
      fi
   done
}

parse_cmd_options() {
   trap "error_handler" ERR

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   local HELP_MSG="See:
man $SCRIPTNAME"

   while :
   do
       case $1 in
           -h | --help | -\?)
               echo "$HELP_MSG"
               exit 0
               ;;
           -v | --verbose)
               echo "$SCRIPTNAME verbose output..."
               set -x
               VERBOSE="1"
               shift
               ;;
           -e | --enable)
               disable="0"
               shift
               ;;
           -d | --disable)
               disable="1"
               shift
               ;;
           -c | --codename)
               codename="$2"
               if [ "$codename" = "" ]; then
                  echo "ERROR: codename may not be empty! You most likely want to use stable, testers or developers as codename."
                  exit 1
               fi
               shift 2
               ;;
           -d | --gui)
               gui="1"
               shift
               ;;
           -j | --just)
               disable="3"
               just="1"
               shift
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## Fallback if no option has been chosen.
   if [ "$disable" = "" ]; then
      gui="1"
   fi

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
}

add_keys() {
   trap "error_handler" ERR

   local key

   for key in "$1"*; do
      local filename
      filename="$(basename "$key")"
      if [ "$filename" = "placeholder" ]; then
         continue
      fi
      if [ "$filename" = "*" ]; then
         ## Folder is empty.
         continue
      fi
      echo "INFO $0: Adding key: $key..."
      apt-key add "$key" #>/dev/null 2>/dev/null
   done
}

revoke_keys() {
   trap "error_handler" ERR

   gpg_tmp="$(mktemp --directory)"

   rm --recursive --force "$gpg_tmp"
   mkdir --parents "$gpg_tmp"
   chmod 700 "$gpg_tmp"

   local key

   for key in "$1"*; do
      filename="$(basename "$key")"
      if [ "$filename" = "placeholder" ]; then
         continue
      fi
      if [ "$filename" = "*" ]; then
         ## Folder is empty.
         continue
      fi
      gpg \
         --no-options \
         --homedir "$gpg_tmp" \
         --no-default-keyring \
         --import "$key" \
         2>/dev/null
   done

   local fingerprint

   for fingerprint in $(\
      gpg \
         --no-options \
         --homedir "$gpg_tmp" \
         --no-default-keyring \
         --with-colons \
         --fingerprint \
         2>/dev/null \
         | awk -F: '$1 == "fpr" {print $10;}' \
         ); do
            ## apt-key del requires the 7 trailing chars of a fingerprint.
            local fingerprint_trailing_seven
            fingerprint_trailing_seven="${fingerprint:(-8)}"
            echo "INFO $0: Removing revoked key with fingerprint $fingerprint (fingerprint_trailing_seven: $fingerprint_trailing_seven)..."
            local apt_key_exit_code
            apt_key_exit_code="0"
            apt-key del "$fingerprint_trailing_seven" || { apt_key_exit_code="$?" ; true; };
            if [ "$apt_key_exit_code" = "0" ]; then
               true "INFO $0: apt-key returned 0."
            elif [ "$apt_key_exit_code" = "2" ]; then
               ## For Ubuntu / CI compatibility.
               ## Ubuntu uses a different version of apt(-key).
               true "INFO $0: apt-key returned 2. (Key not removed, because not there. Probably already removed or never existed.)"
            else
               error "ERROR $0: Unexpected apt-key return code: $apt_key_exit_code. Please report this Whonix Bug!"
            fi
   done
}

gui() {
   trap "error_handler" ERR

   local title="whonix_repository"

   local msg="Automatically install updates from the Whonix team?

Whonix News (via whonixcheck) will notify you of available updates.

When you run
    apt-get dist-upgrade
updates from the Whonix team will be AUTOMATICALLY downloaded and installed, along with updates from the Debian team. Please read https://whonix.org/wiki/Trust to understand the risks.

You can always start the Whonix Repository Tool again by running:
    sudo whonix_repository
"

   exec 3>&1

   local dialog_output

   trap "" ERR

   dialog_output=$(\
      dialog \
         --cancel-label "Exit" \
         --title "$title" \
         --menu "$msg" \
            100 120 20 \
            "1" "Yes. Automatically install updates from the Whonix team." \
            "2" "No. I will manually update from source code." \
            2>&1 1>&3)

   trap "error_handler" ERR

   exec 3>&-;

   if [ "$dialog_output" = "" ]; then
      ## Get rid of the blue console-gui window.
      clear
      echo "INFO: Nothing changed."
      exit 0
   fi

   if [ "$dialog_output" = "1" ]; then
      disable="0"
   elif [ "$dialog_output" = "2" ]; then
      disable="1"
      return 0
   else
      error "Invalid menu action. Please report this bug!"
   fi

   local msg="Which Whonix Repository would you like to receive updates from?

Most users should select the Stable repository.

You can always start the Whonix Repository Tool again by running:
    sudo whonix_repository
"

   exec 3>&1

   local dialog_output

   trap "" ERR

   dialog_output=$(\
      dialog \
         --cancel-label "Exit" \
         --title "$title" \
         --menu "$msg" \
            100 120 20 \
            "1" "Whonix Stable Repository." \
            "2" "Whonix Testers Repository." \
            "3" "Whonix Developers Repository." \
            2>&1 1>&3)

   trap "error_handler" ERR

   exec 3>&-;

   if [ "$dialog_output" = "" ]; then
      ## Get rid of the blue console-gui window.
      clear
      echo "INFO: Nothing changed."
      exit 0
   fi

   if [ "$dialog_output" = "1" ]; then
      codename="stable"
   elif [ "$dialog_output" = "2" ]; then
      codename="testers"
   elif [ "$dialog_output" = "3" ]; then
      codename="developers"
   else
      error "Invalid menu action. Please report this bug!"
   fi
}

parse_variables() {
      if [ ! "$WHONIX_APT_REPOSITORY_DISTRIBUTION_ENV" = "" ]; then
         echo "INFO $0: WHONIX_APT_REPOSITORY_DISTRIBUTION_ENV is set, using ${under}${WHONIX_APT_REPOSITORY_DISTRIBUTION_ENV}${reset} apt repository."
         codename="$WHONIX_APT_REPOSITORY_DISTRIBUTION_ENV"
      elif [ ! "$WHONIX_APT_REPOSITORY_DISTRIBUTION_CONFIG" = "" ]; then
         echo "INFO $0: WHONIX_APT_REPOSITORY_DISTRIBUTION_CONFIG is set in /etc/whonix.d or $root_whonix_d_folder configuration folder, using ${under}${WHONIX_APT_REPOSITORY_DISTRIBUTION_CONFIG}${reset} apt repository."
         codename="$WHONIX_APT_REPOSITORY_DISTRIBUTION_CONFIG"
      fi

      if [ "$codename" = "" ]; then
         true "INFO $0: No distribution defined, defaulting to ${under}stable${reset} apt repository."
         codename="stable"
      fi
}

write_config() {
   trap "error_handler" ERR

   if [ "$WHONIX_APT_REPOSITORY_DISTRUST_ENV" = "1" ]; then
      echo "INFO $0: Environment variable WHONIX_APT_REPOSITORY_DISTRUST_ENV is set to 1, revoking all Whonix apt keys in /usr/share/whonix/keys/whonix-keys.d/* and /usr/share/whonix/keys/whonix-keys-revoked.d/*..."
      disable="1"
   fi

   echo "INFO $0: Writing autogenerated config file $autogenerated_config_file..."

   if [ "$disable" = "1" ]; then
      echo "\
## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Whonix $autogenerated_config_file

## This file has been automatically created by /usr/bin/whonix_repository.
## If you make manual changes to it, your changes get lost next time you run
## the whonix_repository tool or next time your upgrade Whonix.
## You can conveniently manage this file, using the whonix_repository tool.
## For any modifications (delete this file, use stable version, use testers
## version or use developers version), please use the whonix_repository tool.
## Files in $root_whonix_d_folder folder take precedence over /etc/whonix.d folder.
## Run:
##    sudo whonix_repository

## 0: enable Whonix APT repository.
## 1: disable Whonix APT repository.
WHONIX_APT_REPOSITORY_DISTRUST_CONFIG=\"1\"

## End of Whonix $autogenerated_config_file
" > "$autogenerated_config_file"
   else
      echo "\
## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Whonix $autogenerated_config_file

## This file has been automatically created by /usr/bin/whonix_repository.
## If you make manual changes to it, your changes get lost next time you run
## the whonix_repository tool or next time your upgrade Whonix.
## You can conveniently manage this file, using the whonix_repository tool.
## For any modifications (delete this file, use stable version, use testers
## version or use developers version), please use the whonix_repository tool.
## Files in $root_whonix_d_folder folder take precedence over /etc/whonix.d folder.
## Run:
##    sudo whonix_repository

## 0: enable Whonix APT repository.
## 1: disable Whonix APT repository.
WHONIX_APT_REPOSITORY_DISTRUST_CONFIG=\"0\"

## Which distribution (version of Whonix) to use.
## (stable, testers or developers)
## Defaults to stable, when not set.
WHONIX_APT_REPOSITORY_DISTRIBUTION_CONFIG=\"$codename\"

## End of Whonix $autogenerated_config_file
" > "$autogenerated_config_file"
   fi

  cat "$autogenerated_config_file"

  echo "Wrote autogenerated config file."
}

main_function() {
   trap "error_handler" ERR

   root_check
   sanity_tests

   parse_cmd_options ${1+"$@"}
   if [ "$gui" = "1" ]; then
      gui
   fi

   if [ "$just" = "1" ]; then
      true
   else
      write_config
   fi

   read_config
   parse_variables

   ## Disabled by default
   disable="1"
   if [ "$WHONIX_APT_REPOSITORY_DISTRUST_CONFIG" = "0" ]; then
      ## Enable when WHONIX_APT_REPOSITORY_DISTRUST_CONFIG is 0.
      true "INFO $0: WHONIX_APT_REPOSITORY_DISTRUST_CONFIG is set to 0. Setting disable to 0."
      disable="0"
   fi
   if [ "$WHONIX_APT_REPOSITORY_DISTRUST_ENV" = "0" ]; then
      ## Enable when WHONIX_APT_REPOSITORY_DISTRIBUTION_ENV is 0.
      true "INFO $0: WHONIX_APT_REPOSITORY_DISTRIBUTION_ENV is set to 0. Setting disable to 0."
      disable="0"
   fi

   if [ "$disable" = "1" ]; then
      echo "INFO $0: Revoking all Whonix apt keys in /usr/share/whonix/keys/whonix-keys.d/*..."
      revoke_keys "/usr/share/whonix/keys/whonix-keys.d/"
      echo "INFO $0: Revoking all Whonix apt keys in /usr/share/whonix/keys/whonix-keys-revoked.d/*..."
      revoke_keys "/usr/share/whonix/keys/whonix-keys-revoked.d/"
      echo "INFO $0: Revoked all Whonix apt keys. Feel free to manually verify using \"sudo apt-key finger\". Showing output of \"apt-key finger\"..."
      echo " "
   else
      echo "INFO $0: Adding all Whonix apt keys in /usr/share/whonix/keys/whonix-keys/*..."
      add_keys "/usr/share/whonix/keys/whonix-keys.d/"
      echo "INFO $0: Revoking all Whonix apt keys in /usr/share/whonix/keys/whonix-keys-revoked.d/*..."
      revoke_keys "/usr/share/whonix/keys/whonix-keys-revoked.d/"
   fi

   apt-key finger

   if [ "$disable" = "1" ]; then
      if [ -f "/etc/apt/sources.list.d/whonix.list" ]; then
         echo "INFO $0: Deleting Whonix apt repository /etc/apt/sources.list.d/whonix.list..."
         rm --force "/etc/apt/sources.list.d/whonix.list"
         echo "INFO $0: Done, deleted /etc/apt/sources.list.d/whonix.list."
      else
         echo "INFO $0: Ok, /etc/apt/sources.list.d/whonix.list does not exist."
      fi
   else
      echo "INFO $0: Using distribution ${under}$codename${reset} (version of Whonix) as apt repository."
      echo "INFO $0: Creating /etc/apt/sources.list.d/whonix.list..."

      echo "\
## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Whonix /etc/apt/sources.list.d/whonix.list

## This file has been automatically created by /usr/bin/whonix_repository.
## If you make manual changes to it, your changes get lost next time you run
## the whonix_repository tool or next time your upgrade Whonix.
## You can conveniently manage this file, using the whonix_repository tool.
## For any modifications (delete this file, use stable version, use testers
## version or use developers version), please use the whonix_repository tool.
## Run:
##    sudo whonix_repository

deb http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/ $codename main

## Leaving source line disabled by default to safe some time, it's not useful
## anyway, since it's better to get the source code from the git repository.
#deb-src http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/ $codename main

## End of /etc/apt/sources.list.d/whonix.list
" > "/etc/apt/sources.list.d/whonix.list"

      cat "/etc/apt/sources.list.d/whonix.list"
      echo "INFO $0: Done, created /etc/apt/sources.list.d/whonix.list."
   fi

   sync
}

main_function ${1+"$@"}
