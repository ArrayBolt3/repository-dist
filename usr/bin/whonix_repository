#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x
set -o pipefail
set -o errtrace

SCRIPTNAME="$(basename "$BASH_SOURCE")"

error_handler() {
   local exit_code="$?"

   local MSG="\
###############################################################################
## $SCRIPTNAME script bug.
## Please report this bug!
##
## BASH_COMMAND: $BASH_COMMAND
## exit_code: $exit_code
##
## Experts only:
## $SCRIPTNAME --verbose
## for verbose output. Clean the output and
## submit to Whonix developers.
###############################################################################\
"
   echo "$MSG"
   exit 1
}

trap "error_handler" ERR

colors() {
   if [ "$TERM" = "" ]; then
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/037
   ## Variables for terminal requests.
   [[ -t 2 ]] && {
       alt=$(      tput smcup  || tput ti      ) # Start alt display
       ealt=$(     tput rmcup  || tput te      ) # End   alt display
       hide=$(     tput civis  || tput vi      ) # Hide cursor
       show=$(     tput cnorm  || tput ve      ) # Show cursor
       save=$(     tput sc                     ) # Save cursor
       load=$(     tput rc                     ) # Load cursor
       bold=$(     tput bold   || tput md      ) # Start bold
       stout=$(    tput smso   || tput so      ) # Start stand-out
       estout=$(   tput rmso   || tput se      ) # End stand-out
       under=$(    tput smul   || tput us      ) # Start underline
       eunder=$(   tput rmul   || tput ue      ) # End   underline
       reset=$(    tput sgr0   || tput me      ) # Reset cursor
       blink=$(    tput blink  || tput mb      ) # Start blinking
       italic=$(   tput sitm   || tput ZH      ) # Start italic
       eitalic=$(  tput ritm   || tput ZR      ) # End   italic
   [[ $TERM != *-m ]] && {
       red=$(      tput setaf 1|| tput AF 1    )
       green=$(    tput setaf 2|| tput AF 2    )
       yellow=$(   tput setaf 3|| tput AF 3    )
       blue=$(     tput setaf 4|| tput AF 4    )
       magenta=$(  tput setaf 5|| tput AF 5    )
       cyan=$(     tput setaf 6|| tput AF 6    )
   }
       white=$(    tput setaf 7|| tput AF 7    )
       default=$(  tput op                     )
       eed=$(      tput ed     || tput cd      )   # Erase to end of display
       eel=$(      tput el     || tput ce      )   # Erase to end of line
       ebl=$(      tput el1    || tput cb      )   # Erase to beginning of line
       ewl=$eel$ebl                                # Erase whole line
       draw=$(     tput -S <<< '   enacs
                                   smacs
                                   acsc
                                   rmacs' || { \
                   tput eA; tput as;
                   tput ac; tput ae;         } )   # Drawing characters
       back=$'\b'
   } 2>/dev/null ||:
}

preparation() {
   [ -n "$codename_default_stable" ] || codename_default_stable="jessie"
   ## Fallback.
   [ -n "$WHONIX_APT_REPOSITORY_BASEURI" ] || WHONIX_APT_REPOSITORY_BASEURI="\
http://deb.whonix.org
tor+http://deb.kkkkkkkkkk63ava6.onion"

   [ -n "$apt_source_key" ] || apt_source_key="/usr/share/whonix-repository/whonix.asc"
   [ -n "$apt_target_key" ] || apt_target_key="/etc/apt/trusted.gpg.d/whonix.gpg"
}

root_check() {
   if [ "$(id -u)" != "0" ]; then
      echo "ERROR: This must be run as root (sudo)!"
      exit 1
   else
      true "INFO: Script running as root."
   fi
}

sanity_tests() {
   command -v id >/dev/null
}

parse_cmd_options() {
   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/035

   local HELP_MSG="See:
man $SCRIPTNAME"

   while :
   do
       case $1 in
           -h | --help | -\?)
               echo "$HELP_MSG"
               exit 0
               ;;
           -v | --verbose)
               echo "$SCRIPTNAME verbose output..."
               set -x
               VERBOSE="1"
               shift
               ;;
           -e | --enable)
               enable="1"
               shift
               ;;
           -d | --disable)
               disable="1"
               shift
               ;;
           --refresh-keys)
               refresh_keys="1"
               shift
               ;;
           -c | --codename)
               codename="$2"
               if [ "$codename" = "" ]; then
                  echo "ERROR: codename may not be empty! You most likely want to use $codename_default_stable, ${codename_default_stable}-proposed-updates, testers or developers as codename."
                  exit 1
               fi
               shift 2
               ;;
           -r | --repository)
               repository="$2"
               if [ "$repository" = "" ]; then
                  echo "ERROR: repository may not be empty! You most likely want to use stable, stable-proposed-updates, testers or developers as repository."
                  exit 1
               fi
               shift 2
               ;;
           -b | --baseuri)
               WHONIX_APT_REPOSITORY_BASEURI="$2"
               if [ "$WHONIX_APT_REPOSITORY_BASEURI" = "" ]; then
                  echo "ERROR: WHONIX_APT_REPOSITORY_BASEURI may not be empty!"
                  exit 1
               fi
               shift 2
               ;;
           --)
               shift
               break
               ;;
           -*)
               echo "$SCRIPTNAME unknown option: $1" >&2
               exit 1
               ;;
           *)
               break
               ;;
       esac
   done

   ## If there are input files (for example) that follow the options, they
   ## will remain in the "$@" positional parameters.
}

gpg_tmp_create() {
   gpg_tmp="$(mktemp --directory)"

   rm --recursive --force "$gpg_tmp"
   mkdir --parents "$gpg_tmp"
   chmod 700 "$gpg_tmp"
}

gpg_tmp_delete() {
   if [ -d "$gpg_tmp" ]; then
      ## Debugging.
      #ls -la "$gpg_tmp" || true
      rm --recursive "$gpg_tmp" || true
   fi
}

add_keys() {
   echo "INFO $BASH_SOURCE: Copying Whonix from $apt_source_key to $apt_target_key..."

   gpg_tmp_create

   gpg \
      --ignore-time-conflict \
      --no-options \
      --no-default-keyring \
      --homedir "$gpg_tmp" \
      --quiet \
      --import "$apt_source_key"

   cp "$gpg_tmp/pubring.gpg" "$apt_target_key"
   test -f "$apt_target_key"

   gpg_tmp_delete

   echo "INFO $BASH_SOURCE: Done."
}

remove_legacy() {
   echo "INFO $BASH_SOURCE: Removing legacy key entry 2EEACCDA from /etc/apt/trusted.gpg..."
   APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=true \
      apt-key del "2EEACCDA" || true
   echo "INFO $BASH_SOURCE: Done."
}

remove_keys() {
   echo "INFO $BASH_SOURCE: Deleting $apt_target_key..."

   if legacy_test ; then
      true "legacy found"
      remove_legacy
   else
      true "no legacy found"
   fi

   if [ -f "$apt_target_key" ]; then
      rm "$apt_target_key"
      ! test -e "$apt_target_key"
      echo "INFO $BASH_SOURCE: Done."
   else
      echo "INFO $BASH_SOURCE: $apt_target_key does not exist, ok."
   fi
}

legacy_test() {
   gpg_tmp_create
   if gpg \
      --ignore-time-conflict \
      --no-options \
      --no-default-keyring \
      --homedir "$gpg_tmp" \
      --quiet \
      --with-fingerprint /etc/apt/trusted.gpg | \
      grep -q "916B 8D99 C38E AF5E 8ADC  7A2A 8D66 066A 2EEA CCDA" ; then
      gpg_tmp_delete
      return 0
   else
      gpg_tmp_delete
      return 1
   fi
}

refresh_keys() {
   if legacy_test ; then
      legacy_add=true
      remove_legacy
   else
      true "INFO $BASH_SOURCE: Legacy did not exist. Doing nothing, ok."
   fi

   if [ -e "$apt_target_key" ] || [ "$legacy_add" = "true" ]; then
      add_keys
   else
      echo "INFO $BASH_SOURCE: $apt_target_key does not exist. Doing nothing, ok."
   fi
}

parse_variables() {
   if [ "$disable" = "1" ]; then
      return 0
   fi
   if [ "$refresh_keys" = "1" ]; then
      return 0
   fi

   if [ "$codename" = "" ]; then
      if [ "$repository" = "stable" ]; then
         codename="$codename_default_stable"
      elif [ "$repository" = "stable-proposed-updates" ]; then
         codename="${codename_default_stable}-proposed-updates"
      elif [ "$repository" = "testers" ]; then
         codename="testers"
      elif [ "$repository" = "developers" ]; then
         codename="developers"
      else
         echo "ERROR: No option given. Usage examples:

sudo whonix_repository --enable --repository stable

sudo whonix_repository --verbose --enable --repository stable

sudo whonix_repository --enable --codename jessie

sudo whonix_repository --disable

sudo whonix_repository --disable --verbose

See also:

man whonix_repository"
         exit 1
      fi
   fi
}

enable_disable_refresh_keys() {
   if [ "$disable" = "1" ]; then
      remove_legacy
      remove_keys
   elif [ "$enable" = "1" ]; then
      add_keys
   elif [ "$refresh_keys" = "1" ]; then
      refresh_keys
   else
      echo "ERROR: You must use either --enable, --refresh-keys or --disable."
      exit 1
   fi
}

sources_list_generator() {
   if [ "$disable" = "1" ]; then
      if [ -f "/etc/apt/sources.list.d/whonix.list" ]; then
         echo "INFO $BASH_SOURCE: Deleting Whonix apt repository /etc/apt/sources.list.d/whonix.list..."
         rm --force "/etc/apt/sources.list.d/whonix.list"
         echo "INFO $BASH_SOURCE: Done."
      else
         echo "INFO $BASH_SOURCE: /etc/apt/sources.list.d/whonix.list does not exist, ok."
      fi
   elif [ "$refresh_keys" = "1" ]; then
      true
   else
      echo "INFO $BASH_SOURCE: Using distribution ${under}$codename${reset} (version of Whonix) as apt repository."
      echo "INFO $BASH_SOURCE: Creating /etc/apt/sources.list.d/whonix.list..."

      echo "\
## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Whonix /etc/apt/sources.list.d/whonix.list

## This file has been automatically created by /usr/bin/whonix_repository.
## If you make manual changes to it, your changes get lost next time you run
## the whonix_repository tool.
## You can conveniently manage this file, using the whonix_repository tool.
## For any modifications (delete this file, use stable version, use testers
## version or use developers version), please use the whonix_repository tool.
## Run:
##    sudo whonix_repository
" > "/etc/apt/sources.list.d/whonix.list"

   for baseuri in $WHONIX_APT_REPOSITORY_BASEURI; do
      echo "\
deb $baseuri $codename main
#deb-src $baseuri $codename main
" >> "/etc/apt/sources.list.d/whonix.list"
   done

      echo "\
## Leaving source line disabled by default to safe some time, it's not useful
## anyway, since it's better to get the source code from the git repository.

## End of /etc/apt/sources.list.d/whonix.list
" >> "/etc/apt/sources.list.d/whonix.list"

      cat "/etc/apt/sources.list.d/whonix.list"
      echo "INFO $BASH_SOURCE: Done."
   fi
}

main_function() {
   root_check
   sanity_tests
   colors
   preparation
   parse_cmd_options ${1+"$@"}
   parse_variables
   enable_disable_refresh_keys
   sources_list_generator
   sync
}

main_function ${1+"$@"}
